// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let editingId = null;
let currentEditingType = null;
let currentSortField = null;
let currentSortDirection = 'asc';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    renderCurrentTab();
    updateStats();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É localStorage
    if (!window.localStorage) {
        NotificationManager.error('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç localStorage. –î–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (!db) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        return;
    }
    
    console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–æ–∏—Å–∫–æ–≤—ã–µ –ø–æ–ª—è
    const searchInputs = ['computerSearchInput', 'networkSearchInput', 'otherSearchInput', 'assignedSearchInput'];
    searchInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input) {
            input.addEventListener('input', debounce(() => filterCurrentTab(), 300));
        }
    });

    // –§–∏–ª—å—Ç—Ä—ã
    const filters = [
        'buildingFilter', 'typeFilter', 'statusFilter',
        'networkBuildingFilter', 'networkTypeFilter',
        'otherBuildingFilter', 'otherTypeFilter',
        'assignedBuildingFilter'
    ];
    filters.forEach(filterId => {
        const filter = document.getElementById(filterId);
        if (filter) {
            filter.addEventListener('change', () => filterCurrentTab());
        }
    });

    // –§–æ—Ä–º—ã
    setupFormListeners();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
    window.addEventListener('click', function(event) {
        const modals = ['computerModal', 'networkModal', 'otherModal', 'assignedModal'];
        modals.forEach(modalId => {
            const modal = document.getElementById(modalId);
            if (event.target === modal) {
                closeModal(modalId);
            }
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    const inventorySearchInput = document.getElementById('inventorySearchInput');
    if (inventorySearchInput) {
        inventorySearchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchByInventoryNumber();
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
    const deviceSearchInput = document.getElementById('deviceSearchInput');
    if (deviceSearchInput) {
        deviceSearchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchDeviceByInventoryNumber();
            }
        });
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ–æ—Ä–º
function setupFormListeners() {
    // –§–æ—Ä–º–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
    const computerForm = document.getElementById('computerForm');
    if (computerForm) {
        computerForm.addEventListener('submit', handleComputerSubmit);
    }

    // –§–æ—Ä–º–∞ —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const networkForm = document.getElementById('networkForm');
    if (networkForm) {
        networkForm.addEventListener('submit', handleNetworkSubmit);
    }

    // –§–æ—Ä–º–∞ –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
    const otherForm = document.getElementById('otherForm');
    if (otherForm) {
        otherForm.addEventListener('submit', handleOtherSubmit);
    }

    // –§–æ—Ä–º–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const assignedForm = document.getElementById('assignedForm');
    if (assignedForm) {
        assignedForm.addEventListener('submit', handleAssignedSubmit);
    }
}

// Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const stats = db.getStats();
    document.getElementById('totalComputers').textContent = stats.computers;
    document.getElementById('totalNetwork').textContent = stats.network;
    document.getElementById('totalOther').textContent = stats.other;
    document.getElementById('totalAssigned').textContent = stats.assigned;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function openTab(evt, tabName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    const tabContents = document.getElementsByClassName("tab-content");
    for (let i = 0; i < tabContents.length; i++) {
        tabContents[i].classList.remove("active");
    }
    
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
    const tabButtons = document.getElementsByClassName("tab-button");
    for (let i = 0; i < tabButtons.length; i++) {
        tabButtons[i].classList.remove("active");
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName).classList.add("active");
    evt.currentTarget.classList.add("active");
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    renderTabContent(tabName);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
function renderTabContent(tabName) {
    switch(tabName) {
        case 'computers':
            filterComputers();
            break;
        case 'network':
            filterNetworkDevices();
            break;
        case 'other':
            filterOtherDevices();
            break;
        case 'assigned':
            filterAssignedDevices();
            break;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
function renderCurrentTab() {
    const activeTab = document.querySelector('.tab-content.active');
    if (activeTab) {
        renderTabContent(activeTab.id);
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
function filterCurrentTab() {
    const activeTab = document.querySelector('.tab-content.active');
    if (activeTab) {
        renderTabContent(activeTab.id);
    }
}

// === –†–ê–ë–û–¢–ê –° –ö–û–ú–ü–¨–Æ–¢–ï–†–ê–ú–ò ===

function renderComputerTable(data = null) {
    const computers = data || db.getByType('computers');
    const tbody = document.getElementById('computerTable');
    if (!tbody) return;
    
    tbody.innerHTML = '';

    computers.forEach((computer, index) => {
        const statusClass = StatusManager.getStatusClass(computer.status);
        const statusText = StatusManager.getStatusText(computer.status);

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><strong>${StringUtils.escapeHtml(computer.inventoryNumber)}</strong></td>
                <td>${StringUtils.escapeHtml(computer.building)}</td>
                <td>${StringUtils.escapeHtml(computer.location)}</td>
                <td>${StringUtils.escapeHtml(computer.deviceType)}</td>
                <td>${StringUtils.escapeHtml(computer.model || '')}</td>
                <td>${StringUtils.escapeHtml(computer.processor || '')}</td>
                <td>${StringUtils.escapeHtml(computer.ram || '')}</td>
                <td>${StringUtils.escapeHtml(computer.ipAddress || '')}</td>
                <td>${StringUtils.escapeHtml(computer.computerName || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editComputer(${computer.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteComputer(${computer.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

function filterComputers() {
    const searchTerm = document.getElementById('computerSearchInput')?.value || '';
    const buildingFilter = document.getElementById('buildingFilter')?.value || '';
    const typeFilter = document.getElementById('typeFilter')?.value || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';

    let computers = db.getByType('computers');

    // –ü–æ–∏—Å–∫
    if (searchTerm) {
        computers = FilterManager.filterBySearch(computers, searchTerm, [
            'inventoryNumber', 'location', 'model', 'computerName', 'processor', 'ram'
        ]);
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const filters = {};
    if (buildingFilter) filters.building = buildingFilter;
    if (typeFilter) filters.deviceType = typeFilter;
    if (statusFilter) filters.status = statusFilter;

    computers = FilterManager.filterByFilters(computers, filters);

    renderComputerTable(computers);
}

function openComputerModal() {
    editingId = null;
    currentEditingType = 'computer';
    document.getElementById('computerModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä';
    FormManager.clearForm('computerForm');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    resetInventorySearch();
    
    document.getElementById('computerModal').style.display = 'block';
}

function editComputer(id) {
    const computer = db.getByType('computers').find(c => c.id === id);
    if (!computer) {
        NotificationManager.error('–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    editingId = id;
    currentEditingType = 'computer';
    document.getElementById('computerModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('computerInventoryNumber').value = computer.inventoryNumber || '';
    document.getElementById('computerBuilding').value = computer.building || '';
    document.getElementById('computerLocation').value = computer.location || '';
    document.getElementById('computerDeviceType').value = computer.deviceType || '';
    document.getElementById('computerModel').value = computer.model || '';
    document.getElementById('computerProcessor').value = computer.processor || '';
    document.getElementById('computerRam').value = computer.ram || '';
    document.getElementById('computerStorage').value = computer.storage || '';
    document.getElementById('computerGraphics').value = computer.graphics || '';
    document.getElementById('computerIpAddress').value = computer.ipAddress || '';
    document.getElementById('computerName').value = computer.computerName || '';
    document.getElementById('computerYear').value = computer.year || '';
    document.getElementById('computerNotes').value = computer.notes || '';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    resetInventorySearch();

    document.getElementById('computerModal').style.display = 'block';
}

function deleteComputer(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä?')) {
        if (db.delete('computers', id)) {
            NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
            filterComputers();
            updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
        }
    }
}

function handleComputerSubmit(e) {
    e.preventDefault();

    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = {
        inventoryNumber: document.getElementById('computerInventoryNumber').value.trim(),
        building: document.getElementById('computerBuilding').value,
        location: document.getElementById('computerLocation').value.trim(),
        deviceType: document.getElementById('computerDeviceType').value,
        model: document.getElementById('computerModel').value.trim(),
        processor: document.getElementById('computerProcessor').value.trim(),
        ram: document.getElementById('computerRam').value.trim(),
        storage: document.getElementById('computerStorage').value.trim(),
        graphics: document.getElementById('computerGraphics').value.trim(),
        ipAddress: document.getElementById('computerIpAddress').value.trim(),
        computerName: document.getElementById('computerName').value.trim(),
        year: document.getElementById('computerYear').value.trim(),
        notes: document.getElementById('computerNotes').value.trim()
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationRules = {
        inventoryNumber: { required: true, message: '–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        building: { required: true, message: '–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        location: { required: true, message: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        deviceType: { required: true, message: '–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
    };

    const validation = FormManager.validateForm('computerForm', validationRules);
    if (!validation.valid) {
        NotificationManager.error(validation.errors.join('\n'));
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞
    if (formData.ipAddress && !Validator.isValidIP(formData.ipAddress)) {
        NotificationManager.warning('IP-–∞–¥—Ä–µ—Å –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    formData.status = StatusManager.getStatus(formData.notes);

    try {
        if (editingId && currentEditingType === 'computer') {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (db.update('computers', editingId, formData)) {
                NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
                return;
            }
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
            if (db.add('computers', formData)) {
                NotificationManager.success('–ö–æ–º–ø—å—é—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞');
                return;
            }
        }

        filterComputers();
        updateStats();
        closeModal('computerModal');
    } catch (error) {
        NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
}

// === –†–ê–ë–û–¢–ê –° –°–ï–¢–ï–í–´–ú –û–ë–û–†–£–î–û–í–ê–ù–ò–ï–ú ===

function renderNetworkTable(data = null) {
    const devices = data || db.getByType('networkDevices');
    const tbody = document.getElementById('networkTable');
    if (!tbody) return;
    
    tbody.innerHTML = '';

    devices.forEach((device, index) => {
        const statusClass = StatusManager.getStatusClass(device.status);
        const statusText = StatusManager.getStatusText(device.status);

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td>${StringUtils.escapeHtml(device.type)}</td>
                <td>${StringUtils.escapeHtml(device.model)}</td>
                <td>${StringUtils.escapeHtml(device.building)}</td>
                <td>${StringUtils.escapeHtml(device.location)}</td>
                <td>${StringUtils.escapeHtml(device.ipAddress)}</td>
                <td>${StringUtils.escapeHtml(device.login || '')}</td>
                <td>${StringUtils.escapeHtml(device.wifiName || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editNetworkDevice(${device.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteNetworkDevice(${device.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

function filterNetworkDevices() {
    const searchTerm = document.getElementById('networkSearchInput')?.value || '';
    const buildingFilter = document.getElementById('networkBuildingFilter')?.value || '';
    const typeFilter = document.getElementById('networkTypeFilter')?.value || '';

    let devices = db.getByType('networkDevices');

    // –ü–æ–∏—Å–∫
    if (searchTerm) {
        devices = FilterManager.filterBySearch(devices, searchTerm, [
            'model', 'location', 'ipAddress', 'wifiName', 'login'
        ]);
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const filters = {};
    if (buildingFilter) filters.building = buildingFilter;
    if (typeFilter) filters.type = typeFilter;

    devices = FilterManager.filterByFilters(devices, filters);

    renderNetworkTable(devices);
}

function openNetworkModal() {
    editingId = null;
    currentEditingType = 'network';
    document.getElementById('networkModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    FormManager.clearForm('networkForm');
    document.getElementById('networkModal').style.display = 'block';
}

function editNetworkDevice(id) {
    const device = db.getByType('networkDevices').find(d => d.id === id);
    if (!device) {
        NotificationManager.error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    editingId = id;
    currentEditingType = 'network';
    document.getElementById('networkModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('networkType').value = device.type || '';
    document.getElementById('networkModel').value = device.model || '';
    document.getElementById('networkBuilding').value = device.building || '';
    document.getElementById('networkLocation').value = device.location || '';
    document.getElementById('networkIpAddress').value = device.ipAddress || '';
    document.getElementById('networkLogin').value = device.login || '';
    document.getElementById('networkPassword').value = device.password || '';
    document.getElementById('networkWifiName').value = device.wifiName || '';
    document.getElementById('networkWifiPassword').value = device.wifiPassword || '';
    document.getElementById('networkNotes').value = device.notes || '';

    document.getElementById('networkModal').style.display = 'block';
}

function deleteNetworkDevice(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')) {
        if (db.delete('networkDevices', id)) {
            NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            filterNetworkDevices();
            updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        }
    }
}

function handleNetworkSubmit(e) {
    e.preventDefault();

    const formData = {
        type: document.getElementById('networkType').value,
        model: document.getElementById('networkModel').value.trim(),
        building: document.getElementById('networkBuilding').value,
        location: document.getElementById('networkLocation').value.trim(),
        ipAddress: document.getElementById('networkIpAddress').value.trim(),
        login: document.getElementById('networkLogin').value.trim(),
        password: document.getElementById('networkPassword').value.trim(),
        wifiName: document.getElementById('networkWifiName').value.trim(),
        wifiPassword: document.getElementById('networkWifiPassword').value.trim(),
        notes: document.getElementById('networkNotes').value.trim()
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationRules = {
        type: { required: true, message: '–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        model: { required: true, message: '–ú–æ–¥–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' },
        building: { required: true, message: '–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        location: { required: true, message: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        ipAddress: { required: true, message: 'IP-–∞–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
    };

    const validation = FormManager.validateForm('networkForm', validationRules);
    if (!validation.valid) {
        NotificationManager.error(validation.errors.join('\n'));
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –∞–¥—Ä–µ—Å–∞
    if (!Validator.isValidIP(formData.ipAddress)) {
        NotificationManager.error('IP-–∞–¥—Ä–µ—Å –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        return;
    }

    formData.status = StatusManager.getStatus(formData.notes);

    try {
        if (editingId && currentEditingType === 'network') {
            if (db.update('networkDevices', editingId, formData)) {
                NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
                return;
            }
        } else {
            if (db.add('networkDevices', formData)) {
                NotificationManager.success('–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
                return;
            }
        }

        filterNetworkDevices();
        updateStats();
        closeModal('networkModal');
    } catch (error) {
        NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
}

// === –†–ê–ë–û–¢–ê –° –î–†–£–ì–û–ô –¢–ï–•–ù–ò–ö–û–ô ===

function renderOtherTable(data = null) {
    const devices = data || db.getByType('otherDevices');
    const tbody = document.getElementById('otherTable');
    if (!tbody) return;
    
    tbody.innerHTML = '';

    devices.forEach((device, index) => {
        const statusClass = StatusManager.getStatusClass(device.status);
        const statusText = StatusManager.getStatusText(device.status);

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td>${StringUtils.escapeHtml(device.type)}</td>
                <td>${StringUtils.escapeHtml(device.model)}</td>
                <td>${StringUtils.escapeHtml(device.building)}</td>
                <td>${StringUtils.escapeHtml(device.location)}</td>
                <td>${StringUtils.escapeHtml(device.responsible || '')}</td>
                <td>${StringUtils.escapeHtml(device.inventoryNumber || '')}</td>
                <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                <td>
                    <button class="btn" onclick="editOtherDevice(${device.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteOtherDevice(${device.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

function filterOtherDevices() {
    const searchTerm = document.getElementById('otherSearchInput')?.value || '';
    const buildingFilter = document.getElementById('otherBuildingFilter')?.value || '';
    const typeFilter = document.getElementById('otherTypeFilter')?.value || '';

    let devices = db.getByType('otherDevices');

    // –ü–æ–∏—Å–∫
    if (searchTerm) {
        devices = FilterManager.filterBySearch(devices, searchTerm, [
            'model', 'location', 'responsible', 'inventoryNumber', 'type'
        ]);
    }

    // –§–∏–ª—å—Ç—Ä—ã
    const filters = {};
    if (buildingFilter) filters.building = buildingFilter;
    if (typeFilter) filters.type = typeFilter;

    devices = FilterManager.filterByFilters(devices, filters);

    renderOtherTable(devices);
}

function openOtherModal() {
    editingId = null;
    currentEditingType = 'other';
    document.getElementById('otherModalTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    FormManager.clearForm('otherForm');
    document.getElementById('otherModal').style.display = 'block';
}

function editOtherDevice(id) {
    const device = db.getByType('otherDevices').find(d => d.id === id);
    if (!device) {
        NotificationManager.error('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    editingId = id;
    currentEditingType = 'other';
    document.getElementById('otherModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('otherType').value = device.type || '';
    document.getElementById('otherModel').value = device.model || '';
    document.getElementById('otherBuilding').value = device.building || '';
    document.getElementById('otherLocation').value = device.location || '';
    document.getElementById('otherResponsible').value = device.responsible || '';
    document.getElementById('otherInventoryNumber').value = device.inventoryNumber || '';
    document.getElementById('otherNotes').value = device.notes || '';

    document.getElementById('otherModal').style.display = 'block';
}

function deleteOtherDevice(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?')) {
        if (db.delete('otherDevices', id)) {
            NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            filterOtherDevices();
            updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        }
    }
}

function handleOtherSubmit(e) {
    e.preventDefault();

    const formData = {
        type: document.getElementById('otherType').value,
        model: document.getElementById('otherModel').value.trim(),
        building: document.getElementById('otherBuilding').value,
        location: document.getElementById('otherLocation').value.trim(),
        responsible: document.getElementById('otherResponsible').value.trim(),
        inventoryNumber: document.getElementById('otherInventoryNumber').value.trim(),
        notes: document.getElementById('otherNotes').value.trim()
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationRules = {
        type: { required: true, message: '–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        model: { required: true, message: '–ú–æ–¥–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' },
        building: { required: true, message: '–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        location: { required: true, message: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
    };

    const validation = FormManager.validateForm('otherForm', validationRules);
    if (!validation.valid) {
        NotificationManager.error(validation.errors.join('\n'));
        return;
    }

    formData.status = StatusManager.getStatus(formData.notes);

    try {
        if (editingId && currentEditingType === 'other') {
            if (db.update('otherDevices', editingId, formData)) {
                NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
                return;
            }
        } else {
            if (db.add('otherDevices', formData)) {
                NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
                return;
            }
        }

        filterOtherDevices();
        updateStats();
        closeModal('otherModal');
    } catch (error) {
        NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
}

// === –†–ê–ë–û–¢–ê –° –ù–ê–ó–ù–ê–ß–ï–ù–ù–´–ú–ò –£–°–¢–†–û–ô–°–¢–í–ê–ú–ò ===

function renderAssignedTable(data = null) {
    const assignments = data || db.getByType('assignedDevices');
    const tbody = document.getElementById('assignedTable');
    if (!tbody) return;
    
    tbody.innerHTML = '';

    assignments.forEach((assignment, index) => {
        const devicesHtml = assignment.devices.map(device => 
            `<div class="device-item">${StringUtils.escapeHtml(device)}</div>`
        ).join('');

        tbody.innerHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><strong>${StringUtils.escapeHtml(assignment.employee)}</strong></td>
                <td>${StringUtils.escapeHtml(assignment.position)}</td>
                <td>${StringUtils.escapeHtml(assignment.building)}</td>
                <td><div class="device-list">${devicesHtml}</div></td>
                <td>${DateUtils.formatDate(assignment.assignedDate)}</td>
                <td>
                    <button class="btn" onclick="editAssignedDevice(${assignment.id})" style="font-size: 12px; padding: 5px 10px;" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-danger" onclick="deleteAssignedDevice(${assignment.id})" style="font-size: 12px; padding: 5px 10px; margin-left: 5px;" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </td>
            </tr>
        `;
    });
}

function filterAssignedDevices() {
    const searchTerm = document.getElementById('assignedSearchInput')?.value || '';
    const buildingFilter = document.getElementById('assignedBuildingFilter')?.value || '';

    let assignments = db.getByType('assignedDevices');

    // –ü–æ–∏—Å–∫
    if (searchTerm) {
        assignments = assignments.filter(assignment => {
            const searchFields = [
                assignment.employee,
                assignment.position,
                assignment.devices.join(' ')
            ];
            return searchFields.some(field => 
                field.toLowerCase().includes(searchTerm.toLowerCase())
            );
        });
    }

    // –§–∏–ª—å—Ç—Ä—ã
    if (buildingFilter) {
        assignments = assignments.filter(assignment => assignment.building === buildingFilter);
    }

    renderAssignedTable(assignments);
}

function openAssignedModal() {
    editingId = null;
    currentEditingType = 'assigned';
    document.getElementById('assignedModalTitle').textContent = '–ù–∞–∑–Ω–∞—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É';
    FormManager.clearForm('assignedForm');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    document.getElementById('assignedDate').value = DateUtils.getCurrentDate();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    resetDeviceSearch();
    
    document.getElementById('assignedModal').style.display = 'block';
}

function editAssignedDevice(id) {
    const assignment = db.getByType('assignedDevices').find(a => a.id === id);
    if (!assignment) {
        NotificationManager.error('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    editingId = id;
    currentEditingType = 'assigned';
    document.getElementById('assignedModalTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    document.getElementById('assignedEmployee').value = assignment.employee || '';
    document.getElementById('assignedPosition').value = assignment.position || '';
    document.getElementById('assignedBuilding').value = assignment.building || '';
    document.getElementById('assignedDate').value = assignment.assignedDate || '';
    document.getElementById('assignedDevices').value = assignment.devices.join('\n');
    document.getElementById('assignedNotes').value = assignment.notes || '';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    resetDeviceSearch();

    document.getElementById('assignedModal').style.display = 'block';
}

function deleteAssignedDevice(id) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?')) {
        if (db.delete('assignedDevices', id)) {
            NotificationManager.success('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            filterAssignedDevices();
            updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
        }
    }
}

function handleAssignedSubmit(e) {
    e.preventDefault();

    const devicesText = document.getElementById('assignedDevices').value.trim();
    const devicesArray = devicesText.split('\n').filter(line => line.trim() !== '');

    if (devicesArray.length === 0) {
        NotificationManager.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
        return;
    }

    const formData = {
        employee: document.getElementById('assignedEmployee').value.trim(),
        position: document.getElementById('assignedPosition').value.trim(),
        building: document.getElementById('assignedBuilding').value,
        devices: devicesArray,
        assignedDate: document.getElementById('assignedDate').value,
        notes: document.getElementById('assignedNotes').value.trim()
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationRules = {
        employee: { required: true, message: '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' },
        position: { required: true, message: '–î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' },
        building: { required: true, message: '–ö–æ—Ä–ø—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        assignedDate: { required: true, message: '–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' }
    };

    const validation = FormManager.validateForm('assignedForm', validationRules);
    if (!validation.valid) {
        NotificationManager.error(validation.errors.join('\n'));
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
    if (!Validator.isValidDate(formData.assignedDate)) {
        NotificationManager.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
        return;
    }

    try {
        if (editingId && currentEditingType === 'assigned') {
            if (db.update('assignedDevices', editingId, formData)) {
                NotificationManager.success('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
                return;
            }
        } else {
            if (db.add('assignedDevices', formData)) {
                NotificationManager.success('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
                return;
            }
        }

        filterAssignedDevices();
        updateStats();
        closeModal('assignedModal');
    } catch (error) {
        NotificationManager.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ' + error.message);
    }
}

// === –ü–û–ò–°–ö –ü–û –ò–ù–í–ï–ù–¢–ê–†–ù–û–ú–£ –ù–û–ú–ï–†–£ ===

function searchByInventoryNumber() {
    const inventoryNumber = document.getElementById('inventorySearchInput')?.value?.trim();
    if (!inventoryNumber) {
        NotificationManager.warning('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä');
        return;
    }

    const result = db.findByInventoryNumber(inventoryNumber);
    const searchBox = document.getElementById('inventorySearchBox');
    const infoElement = document.getElementById('autoFillInfo');

    if (result) {
        // –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        searchBox.className = 'inventory-search inventory-found';
        infoElement.textContent = `‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${result.data.model || result.data.type || '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'}`;
        
        // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        fillComputerFormFromData(result.data);
        
        NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    } else {
        // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
        searchBox.className = 'inventory-search inventory-not-found';
        infoElement.textContent = `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º "${inventoryNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä
        document.getElementById('computerInventoryNumber').value = inventoryNumber;
        
        NotificationManager.warning('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function fillComputerFormFromData(data) {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    document.getElementById('computerInventoryNumber').value = data.inventoryNumber || '';
    document.getElementById('computerLocation').value = data.location || '';
    document.getElementById('computerDeviceType').value = data.deviceType || '';
    document.getElementById('computerModel').value = data.model || '';
    document.getElementById('computerProcessor').value = data.processor || '';
    document.getElementById('computerRam').value = data.ram || '';
    document.getElementById('computerStorage').value = data.storage || '';
    document.getElementById('computerGraphics').value = data.graphics || '';
    document.getElementById('computerYear').value = data.year || '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–ø—É—Å
    if (data.building) {
        document.getElementById('computerBuilding').value = data.building;
    } else {
        // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ –ø–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é
        const building = db.determineBuilding(data.location || '');
        document.getElementById('computerBuilding').value = building;
    }
}

function resetInventorySearch() {
    const searchBox = document.getElementById('inventorySearchBox');
    const infoElement = document.getElementById('autoFillInfo');
    const searchInput = document.getElementById('inventorySearchInput');
    
    if (searchBox) searchBox.className = 'inventory-search';
    if (infoElement) infoElement.textContent = '–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π';
    if (searchInput) searchInput.value = '';
}

// === –ü–û–ò–°–ö –£–°–¢–†–û–ô–°–¢–í–ê –î–õ–Ø –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø ===

function searchDeviceByInventoryNumber() {
    const inventoryNumber = document.getElementById('deviceSearchInput')?.value?.trim();
    if (!inventoryNumber) {
        NotificationManager.warning('–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        return;
    }

    const result = db.findByInventoryNumber(inventoryNumber);
    const searchBox = document.getElementById('deviceSearchBox');
    const infoElement = document.getElementById('deviceAutoFillInfo');

    if (result) {
        // –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        searchBox.className = 'inventory-search inventory-found';
        const deviceInfo = `${result.data.deviceType || result.data.type || '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'} ${result.data.model || ''} (${inventoryNumber})`;
        infoElement.textContent = `‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${deviceInfo}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        const devicesTextarea = document.getElementById('assignedDevices');
        const currentDevices = devicesTextarea.value.trim();
        const newDevice = deviceInfo.trim();
        
        if (currentDevices) {
            devicesTextarea.value = currentDevices + '\n' + newDevice;
        } else {
            devicesTextarea.value = newDevice;
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        document.getElementById('deviceSearchInput').value = '';
        
        NotificationManager.success('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫');
    } else {
        // –ù–µ –Ω–∞–π–¥–µ–Ω–æ
        searchBox.className = 'inventory-search inventory-not-found';
        infoElement.textContent = `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –Ω–æ–º–µ—Ä–æ–º "${inventoryNumber}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`;
        
        NotificationManager.warning('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
}

function resetDeviceSearch() {
    const searchBox = document.getElementById('deviceSearchBox');
    const infoElement = document.getElementById('deviceAutoFillInfo');
    const searchInput = document.getElementById('deviceSearchInput');
    
    if (searchBox) searchBox.className = 'inventory-search';
    if (infoElement) infoElement.textContent = '–ü–æ–∏—Å–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è';
    if (searchInput) searchInput.value = '';
}

// === –ò–ú–ü–û–†–¢ –ò –≠–ö–°–ü–û–†–¢ ===

async function importComputers(event) {
    const file = event.target.files[0];
    if (!file) return;

    try {
        NotificationManager.info('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
        
        const excelData = await ExcelManager.readExcelFile(file);
        const result = db.importFromExcel(excelData);
        
        if (result.success) {
            NotificationManager.success(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.count} –∑–∞–ø–∏—Å–µ–π`);
            filterComputers();
            updateStats();
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ' + result.error);
        }
    } catch (error) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
    event.target.value = '';
}

function exportToExcel(type) {
    try {
        const data = db.exportToExcel(type);
        if (data.length === 0) {
            NotificationManager.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        const typeNames = {
            computers: '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã',
            network: '—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            other: '–¥—Ä—É–≥–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞',
            assigned: '–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
        };

        const filename = `${typeNames[type]}_${DateUtils.getCurrentDate()}.xlsx`;
        
        if (ExcelManager.downloadExcel(data, filename)) {
            NotificationManager.success(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª ${filename}`);
        } else {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + error.message);
    }
}

function exportData(type) {
    try {
        const data = db.getByType(type);
        if (data.length === 0) {
            NotificationManager.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
            return;
        }

        const typeNames = {
            computers: '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã',
            networkDevices: '—Å–µ—Ç–µ–≤–æ–µ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            otherDevices: '–¥—Ä—É–≥–∞—è_—Ç–µ—Ö–Ω–∏–∫–∞',
            assignedDevices: '–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ_—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
        };

        const filename = `${typeNames[type] || type}_${DateUtils.getCurrentDate()}.json`;
        const dataStr = JSON.stringify(data, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.click();
        URL.revokeObjectURL(url);
        
        NotificationManager.success(`–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª ${filename}`);
    } catch (error) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + error.message);
    }
}

// === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    editingId = null;
    currentEditingType = null;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    resetInventorySearch();
    resetDeviceSearch();
}

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function createBackup() {
    try {
        db.backup();
        NotificationManager.success('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
    } catch (error) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
function restoreFromBackup(file) {
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const backupData = e.target.result;
            if (db.restore(backupData)) {
                NotificationManager.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
                renderCurrentTab();
                updateStats();
            } else {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        } catch (error) {
            NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ' + error.message);
        }
    };
    reader.readAsText(file);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
function clearAllData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) {
        if (confirm('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!')) {
            try {
                localStorage.removeItem(db.storageKey);
                location.reload();
            } catch (error) {
                NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
function getStatusStatistics() {
    const computers = db.getByType('computers');
    const networkDevices = db.getByType('networkDevices');
    const otherDevices = db.getByType('otherDevices');
    
    const allDevices = [...computers, ...networkDevices, ...otherDevices];
    
    const stats = {
        working: 0,
        issues: 0,
        broken: 0,
        total: allDevices.length
    };
    
    allDevices.forEach(device => {
        if (device.status) {
            stats[device.status]++;
        } else {
            stats.working++;
        }
    });
    
    return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
function showStatusStatistics() {
    const stats = getStatusStatistics();
    const message = `
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:
‚Ä¢ –ò—Å–ø—Ä–∞–≤–Ω—ã–µ: ${stats.working}
‚Ä¢ –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: ${stats.issues}
‚Ä¢ –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ: ${stats.broken}
‚Ä¢ –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${stats.total}
    `;
    
    alert(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
function findDuplicateInventoryNumbers() {
    const computers = db.getByType('computers');
    const otherDevices = db.getByType('otherDevices');
    
    const allDevices = [...computers, ...otherDevices];
    const inventoryNumbers = {};
    const duplicates = [];
    
    allDevices.forEach(device => {
        const number = device.inventoryNumber;
        if (number && number.trim() !== '') {
            if (inventoryNumbers[number]) {
                duplicates.push(number);
            } else {
                inventoryNumbers[number] = true;
            }
        }
    });
    
    if (duplicates.length > 0) {
        NotificationManager.warning(`–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: ${duplicates.join(', ')}`);
    } else {
        NotificationManager.success('–î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    return duplicates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–æ–≤
function validateAllIPAddresses() {
    const computers = db.getByType('computers');
    const networkDevices = db.getByType('networkDevices');
    
    const invalidIPs = [];
    
    computers.forEach(computer => {
        if (computer.ipAddress && !Validator.isValidIP(computer.ipAddress)) {
            invalidIPs.push({
                type: '–ö–æ–º–ø—å—é—Ç–µ—Ä',
                name: computer.inventoryNumber || computer.model,
                ip: computer.ipAddress
            });
        }
    });
    
    networkDevices.forEach(device => {
        if (device.ipAddress && !Validator.isValidIP(device.ipAddress)) {
            invalidIPs.push({
                type: '–°–µ—Ç–µ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
                name: device.model,
                ip: device.ipAddress
            });
        }
    });
    
    if (invalidIPs.length > 0) {
        const message = '–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞:\n' + 
            invalidIPs.map(item => `‚Ä¢ ${item.type}: ${item.name} - ${item.ip}`).join('\n');
        NotificationManager.warning(message);
    } else {
        NotificationManager.success('–í—Å–µ IP-–∞–¥—Ä–µ—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    }
    
    return invalidIPs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function recalculateAllStatuses() {
    try {
        let updatedCount = 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
        const computers = db.getByType('computers');
        computers.forEach(computer => {
            const newStatus = StatusManager.getStatus(computer.notes);
            if (computer.status !== newStatus) {
                computer.status = newStatus;
                updatedCount++;
            }
        });
        db.updateByType('computers', computers);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–µ—Ç–µ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const networkDevices = db.getByType('networkDevices');
        networkDevices.forEach(device => {
            const newStatus = StatusManager.getStatus(device.notes);
            if (device.status !== newStatus) {
                device.status = newStatus;
                updatedCount++;
            }
        });
        db.updateByType('networkDevices', networkDevices);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥—Ä—É–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
        const otherDevices = db.getByType('otherDevices');
        otherDevices.forEach(device => {
            const newStatus = StatusManager.getStatus(device.notes);
            if (device.status !== newStatus) {
                device.status = newStatus;
                updatedCount++;
            }
        });
        db.updateByType('otherDevices', otherDevices);
        
        if (updatedCount > 0) {
            NotificationManager.success(`–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: ${updatedCount}`);
            renderCurrentTab();
        } else {
            NotificationManager.info('–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã');
        }
    } catch (error) {
        NotificationManager.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: ' + error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function sortTable(field, tableType) {
    if (currentSortField === field) {
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
    } else {
        currentSortField = field;
        currentSortDirection = 'asc';
    }
    
    let data;
    switch (tableType) {
        case 'computers':
            data = db.getByType('computers');
            data = FilterManager.sortBy(data, field, currentSortDirection);
            renderComputerTable(data);
            break;
        case 'network':
            data = db.getByType('networkDevices');
            data = FilterManager.sortBy(data, field, currentSortDirection);
            renderNetworkTable(data);
            break;
        case 'other':
            data = db.getByType('otherDevices');
            data = FilterManager.sortBy(data, field, currentSortDirection);
            renderOtherTable(data);
            break;
        case 'assigned':
            data = db.getByType('assignedDevices');
            data = FilterManager.sortBy(data, field, currentSortDirection);
            renderAssignedTable(data);
            break;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Ç–∞–±–ª–∏—Ü
function addSortHandlers() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü
    const tables = document.querySelectorAll('table');
    tables.forEach(table => {
        const headers = table.querySelectorAll('th');
        headers.forEach((header, index) => {
            if (index < headers.length - 1) { // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–î–µ–π—Å—Ç–≤–∏—è"
                header.style.cursor = 'pointer';
                header.addEventListener('click', () => {
                    const tableType = table.closest('.tab-content').id;
                    const field = getSortFieldByIndex(tableType, index);
                    if (field) {
                        sortTable(field, tableType);
                    }
                });
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∫–æ–ª–æ–Ω–∫–∏
function getSortFieldByIndex(tableType, index) {
    const fieldMaps = {
        computers: ['id', 'inventoryNumber', 'building', 'location', 'deviceType', 'model', 'processor', 'ram', 'ipAddress', 'computerName', 'status'],
        network: ['id', 'type', 'model', 'building', 'location', 'ipAddress', 'login', 'wifiName', 'status'],
        other: ['id', 'type', 'model', 'building', 'location', 'responsible', 'inventoryNumber', 'status'],
        assigned: ['id', 'employee', 'position', 'building', 'devices', 'assignedDate']
    };
    
    return fieldMaps[tableType] ? fieldMaps[tableType][index] : null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(addSortHandlers, 1000); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
function generateReport() {
    const stats = getStatusStatistics();
    const computers = db.getByType('computers');
    const networkDevices = db.getByType('networkDevices');
    const otherDevices = db.getByType('otherDevices');
    const assignedDevices = db.getByType('assignedDevices');
    
    const report = {
        generatedDate: new Date().toISOString(),
        summary: {
            totalComputers: computers.length,
            totalNetworkDevices: networkDevices.length,
            totalOtherDevices: otherDevices.length,
            totalAssignedDevices: assignedDevices.length,
            statusStatistics: stats
        },
        computers: computers,
        networkDevices: networkDevices,
        otherDevices: otherDevices,
        assignedDevices: assignedDevices
    };
    
    const filename = `equipment_report_${DateUtils.getCurrentDate()}.json`;
    const dataStr = JSON.stringify(report, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    link.click();
    URL.revokeObjectURL(url);
    
    NotificationManager.success(`–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${filename}`);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
window.openTab = openTab;
window.openComputerModal = openComputerModal;
window.openNetworkModal = openNetworkModal;
window.openOtherModal = openOtherModal;
window.openAssignedModal = openAssignedModal;
window.editComputer = editComputer;
window.editNetworkDevice = editNetworkDevice;
window.editOtherDevice = editOtherDevice;
window.editAssignedDevice = editAssignedDevice;
window.deleteComputer = deleteComputer;
window.deleteNetworkDevice = deleteNetworkDevice;
window.deleteOtherDevice = deleteOtherDevice;
window.deleteAssignedDevice = deleteAssignedDevice;
window.closeModal = closeModal;
window.exportData = exportData;
window.exportToExcel = exportToExcel;
window.importComputers = importComputers;
window.searchByInventoryNumber = searchByInventoryNumber;
window.searchDeviceByInventoryNumber = searchDeviceByInventoryNumber;
window.createBackup = createBackup;
window.restoreFromBackup = restoreFromBackup;
window.clearAllData = clearAllData;
window.showStatusStatistics = showStatusStatistics;
window.findDuplicateInventoryNumbers = findDuplicateInventoryNumbers;
window.validateAllIPAddresses = validateAllIPAddresses;
window.recalculateAllStatuses = recalculateAllStatuses;
window.generateReport = generateReport;